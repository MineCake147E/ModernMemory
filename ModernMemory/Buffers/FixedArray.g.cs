// <auto-generated />
// Environment.Version: 8.0.2
#nullable enable
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Diagnostics;

namespace ModernMemory.Buffers
{
#pragma warning disable S1144 // Unused private types or members should be removed
#pragma warning disable IDE0044 // Add readonly modifier
#pragma warning disable IDE0051 // Remove unused private members
    [StructLayout(LayoutKind.Sequential)]
    [InlineArray(4)]
    [DebuggerDisplay($"{{{nameof(GetDebuggerDisplay)}(),nq}}")]
    internal struct FixedArray4<T>
    {
        private T head;
        public int Length => 4;
        private string GetDebuggerDisplay()
        {
            ReadOnlySpan<T> a = this;
            return $"{nameof(FixedArray4<T>)}<{typeof(T).Name}>[{Length}] {{ {string.Join(", ", a.ToArray())} }}";
        }
        public override string? ToString() => GetDebuggerDisplay();
    }

    [StructLayout(LayoutKind.Sequential)]
    [InlineArray(8)]
    [DebuggerDisplay($"{{{nameof(GetDebuggerDisplay)}(),nq}}")]
    internal struct FixedArray8<T>
    {
        private T head;
        public int Length => 8;
        private string GetDebuggerDisplay()
        {
            ReadOnlySpan<T> a = this;
            return $"{nameof(FixedArray8<T>)}<{typeof(T).Name}>[{Length}] {{ {string.Join(", ", a.ToArray())} }}";
        }
        public override string? ToString() => GetDebuggerDisplay();
    }

    [StructLayout(LayoutKind.Sequential)]
    [InlineArray(12)]
    [DebuggerDisplay($"{{{nameof(GetDebuggerDisplay)}(),nq}}")]
    internal struct FixedArray12<T>
    {
        private T head;
        public int Length => 12;
        private string GetDebuggerDisplay()
        {
            ReadOnlySpan<T> a = this;
            return $"{nameof(FixedArray12<T>)}<{typeof(T).Name}>[{Length}] {{ {string.Join(", ", a.ToArray())} }}";
        }
        public override string? ToString() => GetDebuggerDisplay();
    }

    [StructLayout(LayoutKind.Sequential)]
    [InlineArray(16)]
    [DebuggerDisplay($"{{{nameof(GetDebuggerDisplay)}(),nq}}")]
    internal struct FixedArray16<T>
    {
        private T head;
        public int Length => 16;
        private string GetDebuggerDisplay()
        {
            ReadOnlySpan<T> a = this;
            return $"{nameof(FixedArray16<T>)}<{typeof(T).Name}>[{Length}] {{ {string.Join(", ", a.ToArray())} }}";
        }
        public override string? ToString() => GetDebuggerDisplay();
    }

    [StructLayout(LayoutKind.Sequential)]
    [InlineArray(32)]
    [DebuggerDisplay($"{{{nameof(GetDebuggerDisplay)}(),nq}}")]
    internal struct FixedArray32<T>
    {
        private T head;
        public int Length => 32;
        private string GetDebuggerDisplay()
        {
            ReadOnlySpan<T> a = this;
            return $"{nameof(FixedArray32<T>)}<{typeof(T).Name}>[{Length}] {{ {string.Join(", ", a.ToArray())} }}";
        }
        public override string? ToString() => GetDebuggerDisplay();
    }

    [StructLayout(LayoutKind.Sequential)]
    [InlineArray(64)]
    [DebuggerDisplay($"{{{nameof(GetDebuggerDisplay)}(),nq}}")]
    internal struct FixedArray64<T>
    {
        private T head;
        public int Length => 64;
        private string GetDebuggerDisplay()
        {
            ReadOnlySpan<T> a = this;
            return $"{nameof(FixedArray64<T>)}<{typeof(T).Name}>[{Length}] {{ {string.Join(", ", a.ToArray())} }}";
        }
        public override string? ToString() => GetDebuggerDisplay();
    }

#pragma warning restore IDE0051 // Remove unused private members
#pragma warning restore IDE0044 // Add readonly modifier
#pragma warning restore S1144 // Unused private types or members should be removed
}
