<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ parameter name="Configuration" type="string" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#
Span<int> sizes = stackalloc int[] {4, 8, 12, 16, 32, 64, 128, 256};
#>
// <auto-generated />
// Environment.Version: <#=Environment.Version#>
#nullable enable
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Diagnostics;

namespace ModernMemory.Buffers
{
#pragma warning disable S1144 // Unused private types or members should be removed
#pragma warning disable IDE0044 // Add readonly modifier
#pragma warning disable IDE0051 // Remove unused private members
<#
    foreach (var size in sizes)
    {
#>
    [StructLayout(LayoutKind.Sequential)]
    [InlineArray(<#=size#>)]
    [DebuggerDisplay($"{{{nameof(GetDebuggerDisplay)}(),nq}}")]
    public struct FixedArray<#=size#><T> : IFixedGenericInlineArray<T, FixedArray<#=size#><T>>
    {
        private T head;
        public int Length => <#=size#>;

        public static int Count => <#=size#>;
    
        public static Span<T> AsSpan(ref FixedArray<#=size#><T> self) => self;
        private string GetDebuggerDisplay()
        {
            ReadOnlySpan<T> a = this;
            return $"{nameof(FixedArray<#=size#><T>)}<{typeof(T).Name}>[{Length}] {{ {string.Join(", ", a.ToArray())} }}";
        }
        public override string? ToString() => GetDebuggerDisplay();
    }

<#
    }
#>
#pragma warning restore IDE0051 // Remove unused private members
#pragma warning restore IDE0044 // Add readonly modifier
#pragma warning restore S1144 // Unused private types or members should be removed
}
